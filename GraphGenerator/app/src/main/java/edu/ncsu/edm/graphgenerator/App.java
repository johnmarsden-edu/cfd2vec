/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.ncsu.edm.graphgenerator;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

import com.opencsv.bean.CsvToBeanBuilder;

public class App {
    private final static int BAD_USAGE_ERROR_CODE = 1;
    private final static int BAD_DIRECTORY_PATH_ARG = 2;

    public static boolean verifyArgs(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: ./gradlew run --args=\"path/to/program/dir/\"");
            System.exit(BAD_USAGE_ERROR_CODE);
        }

        return true;
    }

    public static void verifyDataDirIsDir(File dataDir) {
        if (!dataDir.isDirectory()) {
            System.out.println("Please provide a valid directory");
            System.exit(BAD_DIRECTORY_PATH_ARG);
        }
    }

    public static File findFolderInDir(File dir, String name) {
        File[] files = dir.listFiles();
        for (File file: files) {
            if (file.isDirectory() && file.getName().equals(name)) {
                return file;
            }
        }
        return null;
    }

    public static File getDataFolder(File dataDir) {
        return findFolderInDir(dataDir, "Data");
    }

    public static File getCodeStatesFolder(File dataDir) {
        return findFolderInDir(dataDir, "CodeStates");
    }

    public static void verifyFolderExists(File folder, String nameOfFolder, String nameOfParent) {
        if (folder == null) {
            System.out.println("There is no "+nameOfFolder+" folder in the "+nameOfParent+" folder.");
            System.exit(BAD_DIRECTORY_PATH_ARG);
        }
    }

    public static void main(String[] args) throws FileNotFoundException {
        verifyArgs(args);
        File dataDir = new File(args[0]);
        verifyDataDirIsDir(dataDir);
        String parent = dataDir.getName();
        dataDir = getDataFolder(dataDir);
        verifyFolderExists(dataDir, "Data", parent);
        dataDir = getCodeStatesFolder(dataDir);
        verifyFolderExists(dataDir, "CodeStates", "Data");
        List<CodeState> codeStates = new CsvToBeanBuilder<CodeState>(new FileReader(new File(dataDir, "CodeStates.csv")))
            .withType(CodeState.class).build().parse();
        for (CodeState codeState: codeStates) {
            System.out.println(codeState.getCodeStateId());
        }
    }
}
